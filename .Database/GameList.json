{
  "games": [
    {
      "name": "Beat Saber",
      "steamID": "620980",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    },
    {
      "name": "BONEWORKS",
      "steamID": "823500",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    },
    {
      "name": "Dyson Sphere Program",
      "steamID": "1366540",
      "installer": {
        "Script": "IyAudGVtcGxhdGVzXHVuaXR5ICMgR2FtZSBzcGVjaWZpYyBzdGFydC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gJGdhbWVOYW1lID0gIkR5c29uIFNwaGVyZSBQcm9ncmFtIiAjIG5hbWUgb2YgdGhlIGdhbWUgJHN0ZWFtQXBwSUQgPSAiMTM2NjU0MCIgIyB5b3UgY2FuIGZpbmQgdGhpcyBvbiBodHRwczovL3N0ZWFtZGIuaW5mbywgaXQgc2hvdWxkIGJlIHN0cnVjdHVyZWQgbGlrZSB0aGlzLCAiTlVNQkVSIiAkZ2FtZUV4ZWN1dGFibGVOYW1lID0gIkRTUEdBTUUuZXhlIiAjIGV4ZWN1dGFibGUgbmFtZSBzaG91bGQgYmUgc3RydWN0dXJlZCwgIkdBTUUgTkFNRS5leGUiICRnYW1lRm9sZGVyTmFtZSA9ICJEeXNvbiBTcGhlcmUgUHJvZ3JhbSIgIyBpbnN0YWxsIGZvbGRlciBzaG91bGQgYmUgc3RydWN0dXJlZCBsaWtlIHRoaXMsICJHQU1FIEZPTERFUiBOQU1FIiBqdXN0IGdpdmUgdGhlIGZvbGRlciBuYW1lICRnYW1lU2F2ZUZvbGRlciA9ICJDOlxVc2Vyc1wkZW52OnVzZXJuYW1lXERvY3VtZW50c1xEeXNvbiBTcGhlcmUgUHJvZ3JhbSIgIyB0aGUgZm9sZGVyIHdoZXJlIHNhdmVzIGFyZSBsb2NhdGVkLCBpZiB0aGUgZ2FtZSBkb2VzIG5vdCBzdG9yZSBzYXZlIGZpbGVzIGluIGEgZm9sZGVyIGNvbW1lbnQgdGhpcyBvdXQtICMgLUlmIHRoZSBnYW1lIGRvZXMgaXQgc2hvdWxkIGJlIHN0cnVjdHVyZWQgbGlrZSB0aGlzICJGdWxsRm9sZGVyUGF0aCIuIE1ha2Ugc3VyZSBub3QgdG8gaW5jbHVkZSB1c2VyL2NvbXB1dGVyIHNwZWNpZmljIGluZm9ybWF0aW9uIGFuZCB1c2UtICMgLWVudmlyb25tZW50IHZhcmlhYmxlcyBpbnN0ZWFkLiBNb3N0IFVuaXR5IGdhbWVzIHN0b3JlIGZpbGVzIGF0ICIkZW52OmFwcGRhdGFcLi5cTG9jYWxMb3dcW0NPTVBBTlkgTkFNRV1cW0dBTUUgTkFNRV0iICRnYW1lU2F2ZUV4dGVuc2lvbnMgPSAiLmRzdiIgIyB0aGUgZ2FtZSBzYXZlIGZvbGRlciBzb21ldGltZXMgY29udGFpbnMgaW5mb3JtYXRpb24gb3RoZXIgdGhhbiBqdXN0IGdhbWUgc2F2ZXMsIGFuZCBzb21lLSAjIC1maWxlcyBzaG91bGQgbm90IGJlIHVwbG9hZGVkIHRvIFN0ZWFtIENsb3VkLiBJZiB0aGVyZSBpcyBvbmUgZXh0ZW5zaW9uIGZvcm1hdCBpdCBsaWtlIHRoaXMgIi5bRVhURU5TSU9OXSIuIElmIHRoZXJlIGFyZSBtb3JlIHRoYXQgb25lIGZvcm1hdCBpdCBsaWtlIHRoaXMgIyAiW0VYVEVOU0lPTjFdIiwgIltFWFRFTlNJT04yXSIsICJbRVhURU5TSU9OM10iICMgJGdhbWVSZWdpc3RyeUVudHJpZXMgPSAiW0lOU0VSVCBSRUdJU1RSWSBMT0NBVElPTl0iICMgdGhlIGxvY2F0aW9uIHdoZXJlIHJlZ2lzdHJ5IGVudHJpZXMgYXJlIGxvY2F0ZWQsIGlmIHRoZSBnYW1lIGRvZXMgbm90IHN0b3JlIHNhdmUgZmlsZXMgaW4gdGhlIHJlZ2lzdHJ5LSAjIC0gY29tbWVudCB0aGlzIG91dCBieSBzaW1wbHkgcHV0dGluZyBhICIjIiBiZWZvcmUgdGhlICIkIi4gSWYgdGhlIGdhbWUgZG9lcyBpdCBzaG91bGQgYmUgc3RydWN0dXJlZCBsaWtlIHRoaXMgIkhLQ1VcU09GVFdBUkVcW0NPTVBBTlkgTkFNRV1cW0dBTUUgTkFNRV0iLiAjIEdhbWUgc3BlY2lmaWMgZW5kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAkY2xvdWROYW1lID0gIiRnYW1lTmFtZSBTdGVhbSBDbG91ZCIgJGRhdGFiYXNlVVJMID0gImh0dHBzOi8vYWxkaW4xMDEuZ2l0aHViLmlvL1N0ZWFtLUNsb3VkLyQoJGdhbWVOYW1lLlJlcGxhY2UoJyAnLCAnJTIwJykpLyQoJGdhbWVOYW1lLlJlcGxhY2UoJyAnLCAnJTIwJykpLmpzb24iICR1cGRhdGVMaW5rID0gImh0dHBzOi8vYWxkaW4xMDEuZ2l0aHViLmlvL1N0ZWFtLUNsb3VkLyQoJGdhbWVOYW1lLlJlcGxhY2UoJyAnLCAnJTIwJykpL1N0ZWFtQ2xvdWRTeW5jLmV4ZSIgJGZpbGUgPSBJbnZva2UtV2ViUmVxdWVzdCAiJGRhdGFiYXNlVVJMIiAtVXNlQmFzaWNQYXJzaW5nICRkYXRhYmFzZSA9ICRmaWxlLkNvbnRlbnQgfCBDb252ZXJ0RnJvbS1Kc29uIGZ1bmN0aW9uIEZvcm1hdC1Kc29uKFtQYXJhbWV0ZXIoTWFuZGF0b3J5LCBWYWx1ZUZyb21QaXBlbGluZSldW1N0cmluZ10gJGpzb24pIHsgICAgICRpbmRlbnQgPSAwOyAgICAgKCRqc29uIC1TcGxpdCAnXG4nIHwgICAgICAgJSB7ICAgICAgICAgaWYgKCRfIC1tYXRjaCAnW1x9XF1dJykgeyAgICAgICAgICAgJGluZGVudC0tICAgICAgICAgfSAgICAgICAgICRsaW5lID0gKCcgJyAqICRpbmRlbnQgKiAyKSArICRfLlRyaW1TdGFydCgpLlJlcGxhY2UoJzogICcsICc6ICcpICAgICAgICAgaWYgKCRfIC1tYXRjaCAnW1x7XFtdJykgeyAgICAgICAgICAgJGluZGVudCsrICAgICAgICAgfSAgICAgICAgICRsaW5lICAgICB9KSAtSm9pbiAiYG4iIH0gICBpZiAodGVzdC1wYXRoICIkZW52OmFwcGRhdGFcJGNsb3VkTmFtZVxDbG91ZENvbmZpZy5qc29uIikgeyAgICAgJGRpc2FibGVDaG9pY2UgPSBSZWFkLUhvc3QgIlN0ZWFtIENsb3VkIGlzIGFscmVhZHkgZW5hYmxlZCBmb3IgdGhpcyBnYW1lLiBXb3VsZCB5b3UgbGlrZSB0byBkaXNhYmxlIFN0ZWFtIENsb3VkIFt5L25dIiAgICAgaWYgKCRkaXNhYmxlQ2hvaWNlIC1uZSAibiIgLWFuZCAkZGlzYWJsZUNob2ljZSAtbmUgIk4iIC1hbmQgJGRpc2FibGVDaG9pY2UgLW5lICJubyIpIHsgICAgICAgICBpZiAodGVzdC1wYXRoICIkZW52OmFwcGRhdGFcJGNsb3VkTmFtZVwxXCIpIHsgICAgICAgICAgICAgZWNobyAiVGhpcyB0b29sIG1hZGUgYmFja3VwcyBvZiB5b3VyIHNhdmUgZGF0YSwgdGhleSBhcmUgbm90IG5lZWRlZCBhbnltb3JlIGFuZCBjYW4gYmUgZGVsZXRlZC4iICAgICAgICAgICAgIGVjaG8gIkRlbGV0aW5nIHRoZW0gd2lsbCBoYXZlIG5vIGVmZmVjdCBvbiB5b3VyIHNhdmVzIHN0b3JlZCBsb2NhbGx5LCBzdG9yZWQgb24gb3RoZXIgY29tcHV0ZXIgb3IgaW4gU3RlYW0gQ2xvdWQuIiAgICAgICAgICAgICAkY2hvaWNlID0gUmVhZC1Ib3N0ICJXb3VsZCB5b3UgbGlrZSB0byBkZWxldGUgbG9jYWwgc2F2ZSBiYWNrdXBzPyBbWS9uXSIgICAgICAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJuIiAtb3IgJGNob2ljZSAtZXEgIk4iIC1vciAkY2hvaWNlIC1lcSAibm8iKSB7ICAgICAgICAgICAgICAgICBNb3ZlLUl0ZW0gIiRlbnY6YXBwZGF0YVwkY2xvdWROYW1lXCIgIiRlbnY6dXNlcnByb2ZpbGVcZGVza3RvcFxTYXZlIEJhY2t1cHMgZm9yICRnYW1lbmFtZVwiIC1SZWN1cnNlIC1Gb3JjZSAtRXhjbHVkZSAiQ2xvdWRDb25maWcuanNvbiIgICAgICAgICAgICAgfSAgICAgICAgIH0gICAgICAgICBjbHMgICAgICAgICBlY2hvICJEaXNhYmxpbmcgY2xvdWQgc3luYyBvbiB0aGlzIGNvbXB1dGVyLi4uIiAgICAgICAgICRDbG91ZENvbmZpZyA9IEdldC1Db250ZW50ICIkZW52OmFwcGRhdGFcJGNsb3VkTmFtZVxDbG91ZENvbmZpZy5qc29uIiB8IENvbnZlcnRGcm9tLUpzb24gICAgICAgICBjZCAkQ2xvdWRDb25maWcuZ2FtZXBhdGggICAgICAgICBSZW1vdmUtSXRlbSAiLlwkKCRnYW1lRXhlY3V0YWJsZU5hbWUuVHJpbUVuZCgiLmV4ZSIpKSBHYW1lX0RhdGEiIC1SZWN1cnNlICAgICAgICAgUmVtb3ZlLUl0ZW0gIi5cJGdhbWVFeGVjdXRhYmxlTmFtZSIgICAgICAgICBSZW5hbWUtSXRlbSAiLlwkKCRnYW1lRXhlY3V0YWJsZU5hbWUuVHJpbUVuZCgiLmV4ZSIpKSBHYW1lLmV4ZSIgIiRnYW1lRXhlY3V0YWJsZU5hbWUiICAgICAgICAgdGFza2tpbGwgL2YgL2ltICIkY2xvdWROYW1lLmV4ZSIgMj4kbnVsbCB8IE91dC1OdWxsICAgICAgICAgUmVtb3ZlLUl0ZW0gIiRlbnY6YXBwZGF0YVxNaWNyb3NvZnRcV2luZG93c1xTdGFydCBNZW51XFByb2dyYW1zXFN0YXJ0dXBcJGNsb3VkTmFtZS5leGUiICAgICAgICAgUmVtb3ZlLUl0ZW0gIiRlbnY6YXBwZGF0YVwkY2xvdWROYW1lXCIgLUZvcmNlIC1SZWN1cnNlICAgICAgICAgZWNobyAiRmluaXNoZWQsIHByZXNzIGFueSBrZXkgdG8gZXhpdCIgICAgICAgICB0aW1lb3V0IC0xIHwgT3V0LU51bGwgICAgICAgICBleGl0ICAgICB9IGVsc2UgeyAgICAgICAgIGVjaG8gIlByZXNzIGFueSBrZXkgdG8gZXhpdCIgICAgICAgICB0aW1lb3V0IC0xIHwgT3V0LU51bGwgICAgICAgICBleGl0ICAgICB9IH0gIGVjaG8gIlNldHRpbmcgdXAgU3RlYW0gQ2xvdWQuLi4iICRzdGVhbVBhdGggPSAoR2V0LUl0ZW1Qcm9wZXJ0eSAtcGF0aCAnSEtDVTpcU09GVFdBUkVcVmFsdmVcU3RlYW0nKS5zdGVhbVBhdGggJGk9MCBpZiAodGVzdC1wYXRoICIkc3RlYW1QYXRoXHN0ZWFtYXBwc1xjb21tb25cJGdhbWVGb2xkZXJOYW1lXCIpIHsgICAgICRnYW1lcGF0aCA9ICIkc3RlYW1QYXRoXHN0ZWFtYXBwc1xjb21tb25cJGdhbWVGb2xkZXJOYW1lXCIgfSBlbHNlIHsgICAgIGV4cGxvcmVyLmV4ZSAic3RlYW06Ly9sYXVuY2gvJHN0ZWFtQXBwSUQiICAgICB3aGlsZSAoJGdhbWVwYXRoIC1lcSAkbnVsbCAtYW5kICRpIC1sdCA1KSB7ICAgICAgICAgJGdhbWVwYXRoID0gR2V0LUNpbUluc3RhbmNlIFdpbjMyX1Byb2Nlc3MgLUZpbHRlciAibmFtZSA9ICckZ2FtZUV4ZWN1dGFibGVOYW1lJyIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgICAgICAgICArKyRpICAgICAgICAgdGltZW91dC5leGUgL3QgMSAvbm9icmVhayB8IE91dC1OdWxsICAgICB9ICAgICBpZiAoJGdhbWVwYXRoIC1lcSAkbnVsbCkgeyAgICAgICAgIGVjaG8gIlVuYWJsZSB0byBnZXQgZ2FtZSBpbnN0YWxsIGxvY2F0aW9uLCBwbGVhc2UgbWFrZSBzdXJlIHRoYXQgU3RlYW0gaXMgcnVubmluZyBhbmQgdHJ5IGFnYWluIiAgICAgICAgIGVjaG8gIlByZXNzIGFueSBrZXkgdG8gZXhpdCIgICAgICAgICB0aW1lb3V0IC0xIHwgT3V0LU51bGwgICAgICAgICBleGl0ICAgICB9ICAgICAkZ2FtZXBhdGggPSAkZ2FtZXBhdGguQ29tbWFuZExpbmUgLXJlcGxhY2UgJyInLCAiIiAgICAgJGdhbWVwYXRoID0gJGdhbWVwYXRoLlRyaW1FbmQoJGdhbWVFeGVjdXRhYmxlTmFtZSkgICAgIHRhc2traWxsIC9mIC9pbSAkZ2FtZUV4ZWN1dGFibGVOYW1lIDI+JG51bGwgfCBPdXQtTnVsbCB9ICBjZCAkZ2FtZXBhdGggaWYgKFRlc3QtUGF0aCAiJHN0ZWFtUGF0aFxzdGVhbWFwcHNcY29tbW9uXFN0ZWFtIENvbnRyb2xsZXIgQ29uZmlnc1wkc3RlYW1pZFxjb25maWdcJHN0ZWFtQXBwSURcaXNDb25maWd1cmVkLnZkZiIpIHsgICAgIHdoaWxlICgkY2hvaWNlIC1lcSAkbnVsbCkgeyAgICAgICAgIGVjaG8gIlN0ZWFtIENsb3VkIGhhcyBhbHJlYWR5IGJlZW4gc2V0dXAgb24gYW5vdGhlciBjb21wdXRlciwgYW5kIHNhdmVzIGZvciB0aGF0IGNvbXB1dGVyIGFyZSBhbHJlYWR5IGluIFN0ZWFtIENsb3VkIiAgICAgICAgIGVjaG8gIlsxXSBPdmVycmlkZSB5b3VyIFN0ZWFtIENsb3VkIHNhdmVzIHdpdGggdGhlIG9uZXMgb24gdGhpcyBjb21wdXRlciIgICAgICAgICBlY2hvICJbMl0gT3ZlcnJpZGUgeW91ciBzYXZlcyBvbiB0aGlzIGNvbXB1dGVyIHdpdGggdGhlIG9uZXMgaW4gU3RlYW0gQ2xvdWQiICAgICAgICAgZWNobyAiWzNdIENhbmNlbCBpbnN0YWxsYXRpb24iICAgICAgICAgJGNob2ljZSA9IFJlYWQtSG9zdCAiV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBkbyIgICAgICAgICBpZiAoJGNob2ljZSAtZXEgMSkgeyAgICAgICAgICAgICBkZWwgIiRzdGVhbVBhdGhcc3RlYW1hcHBzXGNvbW1vblxTdGVhbSBDb250cm9sbGVyIENvbmZpZ3NcJHN0ZWFtaWRcY29uZmlnXCRzdGVhbUFwcElEXCIgLVJlY3Vyc2UgICAgICAgICAgICAgZWNobyAiU2V0dGluZyB1cCBTdGVhbSBDbG91ZC4uLiIgICAgICAgICAgICAgYnJlYWsgICAgICAgICB9ICAgICAgICAgaWYgKCRjaG9pY2UgLWVxIDIpIHsgICAgICAgICAgICAgZWNobyAiU2V0dGluZyB1cCBTdGVhbSBDbG91ZC4uLiIgICAgICAgICAgICAgYnJlYWsgICAgICAgICB9ICAgICAgICAgaWYgKCRjaG9pY2UgLWVxIDMpIHsgICAgICAgICAgICAgZWNobyAiSW5zdGFsbGF0aW9uIGNhbmNlbGVkIiAgICAgICAgICAgICBlY2hvICJQcmVzcyBhbnkga2V5IHRvIGV4aXQiICAgICAgICAgICAgIHRpbWVvdXQgLTEgfCBPdXQtTnVsbCAgICAgICAgICAgICBleGl0ICAgICAgICAgfSAgICAgICAgIGVjaG8gIlRoYXQgaXMgbm90IGEgdmFsaWQgb3B0aW9uIiAgICAgICAgIHRpbWVvdXQgLTEgICAgICAgICAkY2hvaWNlID0gJG51bGwgICAgICAgICBjbHMgICAgICAgICBlY2hvICJTZXR0aW5nIHVwIFN0ZWFtIENsb3VkLi4uIiAgICAgfSB9IGVsc2UgeyAgICAgJGNob2ljZSA9IDEgfSBta2RpciAiJGVudjphcHBkYXRhXCRnYW1lbmFtZSBTdGVhbSBDbG91ZFwiIHwgb3V0LW51bGwgUmVuYW1lLUl0ZW0gIi5cJGdhbWVFeGVjdXRhYmxlTmFtZSIgIiQoJGdhbWVFeGVjdXRhYmxlTmFtZS5UcmltRW5kKCIuZXhlIikpIEdhbWUuZXhlIiBDb3B5LUl0ZW0gIi5cJCgkZ2FtZUV4ZWN1dGFibGVOYW1lLlRyaW1FbmQoIi5leGUiKSlfRGF0YSIgIi5cJCgkZ2FtZUV4ZWN1dGFibGVOYW1lLlRyaW1FbmQoIi5leGUiKSkgR2FtZV9EYXRhIiAtUmVjdXJzZSBta2RpciAiJHN0ZWFtUGF0aFxzdGVhbWFwcHNcY29tbW9uXFN0ZWFtIENvbnRyb2xsZXIgQ29uZmlnc1wkc3RlYW1pZFxjb25maWdcJHN0ZWFtQXBwSUQiIHwgb3V0LW51bGwgSW52b2tlLVdlYlJlcXVlc3QgJGRhdGFiYXNlLnVwZGF0ZUxpbmsgLU91dEZpbGUgIi5cJGdhbWVFeGVjdXRhYmxlTmFtZSIgIEludm9rZS1XZWJSZXF1ZXN0ICRkYXRhYmFzZS5nYW1lVXBkYXRlQ2hlY2tlciAtT3V0RmlsZSAiJGVudjphcHBkYXRhXE1pY3Jvc29mdFxXaW5kb3dzXFN0YXJ0IE1lbnVcUHJvZ3JhbXNcU3RhcnR1cFwkY2xvdWROYW1lLmV4ZSIgaWYgKCRjaG9pY2UgLWVxIDEpIHsgICAgIGlmICgkZ2FtZVNhdmVGb2xkZXIgLW5lICRudWxsKSB7ICAgICAgICAgR2V0LUNoaWxkSXRlbSAkZ2FtZVNhdmVGb2xkZXIgLXJlY3Vyc2UgLUluY2x1ZGUgKCRnYW1lU2F2ZUV4dGVuc2lvbnMgfCBGb3JFYWNoLU9iamVjdCB7ICIqJF8iIH0pIHwgYCAgICAgICAgIEZvckVhY2gtT2JqZWN0IHsgICAgICAgICAgICAgJHRhcmdldEZpbGUgPSAiJHN0ZWFtUGF0aFxzdGVhbWFwcHNcY29tbW9uXFN0ZWFtIENvbnRyb2xsZXIgQ29uZmlnc1wkc3RlYW1pZFxjb25maWdcJHN0ZWFtQXBwSURcIiArICRfLkZ1bGxOYW1lLlN1YlN0cmluZygkZ2FtZVNhdmVGb2xkZXIuTGVuZ3RoKTsgICAgICAgICAgICAgTmV3LUl0ZW0gLUl0ZW1UeXBlIEZpbGUgLVBhdGggJHRhcmdldEZpbGUgLUZvcmNlOyAgICAgICAgICAgICBDb3B5LUl0ZW0gJF8uRnVsbE5hbWUgLWRlc3RpbmF0aW9uICR0YXJnZXRGaWxlICAgICAgICAgfSAgICAgICAgICRjbG91ZEZpbGVzID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAiJHN0ZWFtUGF0aFxzdGVhbWFwcHNcY29tbW9uXFN0ZWFtIENvbnRyb2xsZXIgQ29uZmlnc1wkc3RlYW1pZFxjb25maWdcJHN0ZWFtQXBwSURcIiAgLUluY2x1ZGUgKCRnYW1lU2F2ZUV4dGVuc2lvbnMgfCBGb3JFYWNoLU9iamVjdCB7ICIqJF8iIH0pIC1GaWxlIC1SZWN1cnNlICAgICAgICAgZm9yZWFjaCAoJGZpbGUgaW4gJGNsb3VkRmlsZXMpIHsgICAgICAgICAgICAgUmVuYW1lLUl0ZW0gJGZpbGUgIiQoJGZpbGUuTmFtZSkudmRmIiAgICAgICAgIH0gICAgIH0gICAgIGlmICgkZ2FtZVJlZ2lzdHJ5RW50cmllcyAtbmUgJG51bGwpIHsgICAgICAgICByZWcgZXhwb3J0ICRnYW1lUmVnaXN0cnlFbnRyaWVzICIkc3RlYW1QYXRoXHN0ZWFtYXBwc1xjb21tb25cU3RlYW0gQ29udHJvbGxlciBDb25maWdzXCRzdGVhbWlkXGNvbmZpZ1wkc3RlYW1BcHBJRFxyZWdFbnRyaWVzLnJlZyIgICAgIH0gICAgICJpc0NvbmZpZ3VyZWQiIHwgU2V0LUNvbnRlbnQgIiRzdGVhbVBhdGhcc3RlYW1hcHBzXGNvbW1vblxTdGVhbSBDb250cm9sbGVyIENvbmZpZ3NcJHN0ZWFtaWRcY29uZmlnXCRzdGVhbUFwcElEXGlzQ29uZmlndXJlZC52ZGYiIH0gJENsb3VkQ29uZmlnID0gQHt9ICRDbG91ZENvbmZpZy5BZGQoImdhbWVwYXRoIiwkZ2FtZXBhdGgpICRDbG91ZENvbmZpZy5BZGQoInN0ZWFtcGF0aCIsJHN0ZWFtUGF0aCkgJENsb3VkQ29uZmlnLkFkZCgic3RlYW1JRCIsJHN0ZWFtaWQpICRDbG91ZENvbmZpZy5BZGQoImxhc3RCYWNrdXAiLChHZXQtRGF0ZSkuVG9Vbml2ZXJzYWxUaW1lKCkuU3VidHJhY3QoKEdldC1EYXRlICIxLzEvMTk3MCIpKS5Ub3RhbFNlY29uZHMpICRDbG91ZENvbmZpZy5BZGQoIkNsb3VkU3luY0Rvd25sb2FkIiwgJGRhdGFiYXNlLnVwZGF0ZUxpbmspICRDbG91ZENvbmZpZyB8IENvbnZlcnRUby1Kc29uIC1kZXB0aCAzMiB8IEZvcm1hdC1Kc29uIHwgU2V0LUNvbnRlbnQgIiRlbnY6YXBwZGF0YVwkY2xvdWROYW1lXENsb3VkQ29uZmlnLmpzb24iIFN0YXJ0LVByb2Nlc3MgIiRlbnY6YXBwZGF0YVxNaWNyb3NvZnRcV2luZG93c1xTdGFydCBNZW51XFByb2dyYW1zXFN0YXJ0dXBcJGdhbWVOYW1lIFN0ZWFtIENsb3VkLmV4ZSIgY2xzIGVjaG8gIlN0ZWFtIENsb3VkIHNldHVwIGhhcyBjb21wbGV0ZWQsIHJlbWVtYmVyIHRvIGluc3RhbGwgb24gb3RoZXIgY29tcHV0ZXJzIHRvIHN5bmMgc2F2ZXMiIGVjaG8gIlByZXNzIGFueSBrZXkgdG8gZXhpdCIgdGltZW91dCAtMSB8T3V0LU51bGw="
      },
      "isOnline": true
    },
    {
      "name": "Get To The Orange Door",
      "steamID": "541200",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    }
  ]
}
