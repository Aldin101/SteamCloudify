{
  "games": [
    {
      "name": "Beat Saber",
      "steamID": "620980",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    },
    {
      "name": "BONEWORKS",
      "steamID": "823500",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    },
    {
      "name": "Dyson Sphere Program",
      "steamID": "1366540",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    },
    {
      "name": "Get To The Orange Door",
      "steamID": "541200",
      "installer": {
        "Script": ""
      },
      "isOnline": true
    }
  ]
}
